var fs = require("fs"),
	tpl = require('jqtpl'),
	path = require('path'),
	url = require('url'),
	exec = require('child_process').exec,
	os = require('os'),
	http = require("http"),
	mime = require('mime'),
	_ = require("underscore");
exports.handler = {};
exports.handler["/"] = function(req,res,evt){
	res.write("/ called");
	res.end();
};

exports.handler["/start"] = function(req,res,evt){
	res.write("/start called");
	res.end();
};

//列目录
exports.handler["ACTION_LIST_DIR"] = function(req,res,evt){
	var charset = "utf-8";
	var resHeader = {};
	fs.readFile(__dirname + '/list.htm',charset,function (err, data) {
  		if (err) throw err;
		resHeader['Content-Type'] = mime.lookup('html');
		res.writeHead(200, resHeader);	
		var tplList = data.toString();
		fs.readdir(evt.basePath + evt.pathname, function (err, filenames) {
    		var rootDir = (evt.pathname.slice(-1) !== "/" ? (evt.pathname + "/") : evt.pathname);
			var data = {
							dirs: filenames,
						    Root: rootDir,
					   		ParentRoot: path.normalize(rootDir + "..").replace("\\","\/")	
			};
			res.write(tpl.tmpl( tplList, data), charset);
  	 		res.end();
		});
	});			
};

//合并JS
exports.handler["ACTION_COMBO_JS"] = function(req,res,evt){
	var rejobsPath = /\/jobs(?:\/)?$/;
	var charset = "utf-8";
	var resHeader = {};
	if(evt.basename == "lib.js" || evt.basename == "config.js" || (evt.basename !== "base.js" && !rejobsPath.test(evt.dirname))) {
		this["ACTION_RESPONSE_FILE"](req,res,evt);
	}else if(evt.ext == "js") {	
		exec((os.platform() == 'win32' ? '' : 'python ') + __dirname + '/bin/jscombine.py ' + evt.basePath +  evt.dirname.replace(/\/jobs(?:\/)?/,'') + ' ' + (evt.basename == "base.js" ? evt.basename : "jobs." + evt.basename).replace('.js',''),{
								maxBuffer: 800 * 1024,
							},function(error, stdout, stderr){
								if(error) {
									console.log('合并JS' + error);
								}
								resHeader['Content-Type'] = mime.lookup(evt.pathname);
								res.writeHead(200, resHeader);	
								res.write(stdout, charset);
  	 							res.end();
		});					
	}
};

//合并CSS
exports.handler["ACTION_COMBO_CSS"] = function(req,res,evt){
	this["ACTION_RESPONSE_FILE"](req,res,evt);
};

//渲染PHP
exports.handler["ACTION_RENDER_PHP"] = function(req,res,evt){
	var charset = "utf-8";
	exec((os.platform() == 'win32' ? '' : 'python ') + __dirname + '/bin/combine.py ' + evt.basePath + ' ' + evt.pathname ,function(error, stdout, stderr){
		if(error) {
			console.log('渲染PHP' + error);
		}
		res.write(stdout, charset);
  	 	res.end();
	});
};


function renderPageSection(req,res,evt,html){
	var _sections = [];
	var PageSectionObj = evt.hostOption.PageSection;
	_sections = _.keys(PageSectionObj);
	function getCode(req,res,evt,html){
		var sectionName = "",reSection = null;
		if(_sections.length > 0){
			sectionName = _sections.shift();
		}else{
			res.write(html);
			res.end();
			return;
		}
		reSection = new RegExp('\<\!\-\-section ' + sectionName + '\-\-\>[\\s\\S]*\<\!\-\-end section\-\-\>','gmi');
		if(reSection.test(html)){
			console.log(sectionName + " Matched");
			fs.readFile(PageSectionObj[sectionName],"utf-8",function(err,code){
				html = html.replace(reSection,code);
				reSection = null;
				getCode(req,res,evt,html);
			});
		}else{
			console.log(sectionName + " Not Matched");
			getCode(req,res,evt,html);
		}
	}
	getCode(req,res,evt,html);
}

exports.handler["ACTION_PROXY_BACK"] = function(req,res,evt,postData){
	var options = {
		method: req.method || "GET",
  		host: evt.hostOption.backIp,
  		port: 80,
  		path: evt.pathname + "?" + (evt.query !== "" ? evt.query : ""),
		headers: {
			Host: evt.host,
			Cookie: req.headers.cookie
		}
  	},
	headers = _.keys(req.headers),
	buffers = [], 
	size = 0,
	_this = this;
	if(req.method.toLowerCase() == "post") {
		options.headers["content-length"] = req.headers["content-length"];
		options.headers["content-type"] =  req.headers["content-type"];
	}
  	var _request = http.request(options,function(proxyRes) {
		if(proxyRes.statusCode == "302"){	
			evt.remoteRes = proxyRes;
			_this["REDIRECT_302"](req,res,evt);
			return;
		}
		if(proxyRes.statusCode == "404"){
			_this["NOT_FOUND"](req,res,evt);
			return;
		}
		proxyRes.on('data',function(buffer){
			buffers.push(buffer);
			size += buffer.length;
	 	});
     	proxyRes.on('end',function(data){
			var buffer = new Buffer(size), 
				pos = 0,
				html = "",
				mimeType = proxyRes.headers['content-type'] ||  mime.lookup(mime.lookup(evt.ext.slice(-1) == "/" ? "html" : evt.ext)),
				resHeader = {};
        	for(var i = 0, l = buffers.length; i < l; i++) {
            	buffers[i].copy(buffer, pos);
            	pos += buffers[i].length;
        	}

			html = buffer.toString();
			resHeader['Content-Type'] = mimeType;
			if(proxyRes.headers["set-cookie"]) {
				resHeader['set-cookie'] = proxyRes.headers["set-cookie"];
			}
			res.writeHead(200, resHeader);
			if(mimeType.indexOf("text/html") == -1 || !evt.hostOption.PageSection){
				res.write(html);
				res.end();
			} else {
				renderPageSection(req,res,evt,html);
			}
	 	});
 	});
	_request.on('error', function(e) {
		_this["SERVER_ERROR"](req,res,evt);
  	});
	//发送post的数据
	_request.write(evt.postData ? evt.postData : "");
	_request.end();
};

//直接显示文件
exports.handler["ACTION_RESPONSE_FILE"] = function(req,res,evt){
	var resHeader = {};
	var mimeType =  mime.lookup(evt.pathname);
	var charset = mime.charsets.lookup(mimeType, 'binary');
	fs.readFile(evt.basePath + evt.pathname,charset,function (err, data) {
  		if (err) throw err;
		resHeader['Content-Type'] = mimeType;
		res.writeHead(200, resHeader);
		res.write(data,charset);
  	 	res.end();
	});		
};

exports.handler["NOT_FOUND"] = function(req,res,evt){
	res.write("404");
	res.end();
};

//302错误
exports.handler["REDIRECT_302"] = function(req,res,evt){
	var remoteResHeaders = evt.remoteRes.headers,
		remoteResHeadersKeys = _.keys(remoteResHeaders);
	var resHeader = {};
	for (var i=0,len=remoteResHeadersKeys.length; i < len; i++) {
		resHeader[remoteResHeadersKeys[i]] = remoteResHeaders[remoteResHeadersKeys[i]];
	}
	console.dir('302error'+ resHeader);
    res.writeHead(302, resHeader);
	res.end();
};

exports.handler["SERVER_ERROR"] = function(req,res,evt){
	res.write("SERVER_ERROR");
	res.end();
};

