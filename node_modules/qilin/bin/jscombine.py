#coding=utf-8
import re, os, sys

#源代码目录
CODE_PATH = "code"
req_regex = re.compile('lib\.require\s*\(\s*[\'\"]([^\)]+)[\'\"]\s*\,\s*')
reEnd = re.compile('(;\s*)$')

#合并bat中的js
def getRealName(p,filename):
  flist = filter(lambda f: f[-3:] == ".js",os.listdir(p))
  for fname in flist:
    if fname.lower() == filename:
      return fname


#print getRealName("code","a.js")
#代码执行栈
todo = []

#获取js文件源码
def getCode(namespace):
  path = CODE_PATH + "/" + namespace.replace(".","/") + ".js"
  basename = os.path.basename(path)
  dirname = os.path.dirname(path)
  #print (dirname + '/' + getRealName(dirname,basename)).strip()
  readcode = open(path.strip(),"r")
  code = readcode.read()
  readcode.close()
  return code

'''
将代码装入todo堆栈中
recurCode("jobs.reg")
'''
def recurCode(ns):
    code = getCode(ns)
    alllist = req_regex.findall(code)
    if len(alllist) == 0:
        #执行代码排重
        if code in todo:
          todo.remove(code)
        todo.insert(0,code)
        return
    else:
        FileList = alllist[0]
        
        #获取执行代码
        JobCode = req_regex.sub("(",code)
        JobCode = reEnd.sub("();",JobCode)
        
        #执行代码排重
        if JobCode in todo:
          todo.remove(JobCode)
        todo.insert(0,JobCode)
        
        JsList = FileList.lower().split(",")
        #文件列表排重
        jsListTemp  = []
        [jsListTemp.append(i.strip()) for i in JsList if not i in jsListTemp]
        jsListTemp.reverse()
        
        for js in jsListTemp:
            recurCode(js)
            
'''
合并代码文件
CombineJob("jobs.reg")
'''

def CombineJob(ns,isPublic = False):
    recurCode(ns)
    return "\r\n".join(todo)


if not  (sys.argv[1] == "" and sys.argv[2] == ""):
	CODE_PATH = sys.argv[1]
	print CombineJob(sys.argv[2])





